// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mrtyunjaygr8/passwd/ent/creds"
	"github.com/mrtyunjaygr8/passwd/ent/passwords"
)

// Passwords is the model entity for the Passwords schema.
type Passwords struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PasswordsQuery when eager-loading is set.
	Edges           PasswordsEdges `json:"edges"`
	creds_passwords *int
}

// PasswordsEdges holds the relations/edges for other nodes in the graph.
type PasswordsEdges struct {
	// Cred holds the value of the cred edge.
	Cred *Creds `json:"cred,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CredOrErr returns the Cred value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PasswordsEdges) CredOrErr() (*Creds, error) {
	if e.loadedTypes[0] {
		if e.Cred == nil {
			// The edge cred was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: creds.Label}
		}
		return e.Cred, nil
	}
	return nil, &NotLoadedError{edge: "cred"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Passwords) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case passwords.FieldID:
			values[i] = new(sql.NullInt64)
		case passwords.FieldPassword:
			values[i] = new(sql.NullString)
		case passwords.FieldCreateTime, passwords.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case passwords.ForeignKeys[0]: // creds_passwords
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Passwords", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Passwords fields.
func (pa *Passwords) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passwords.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case passwords.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pa.CreateTime = value.Time
			}
		case passwords.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pa.UpdateTime = value.Time
			}
		case passwords.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pa.Password = value.String
			}
		case passwords.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field creds_passwords", value)
			} else if value.Valid {
				pa.creds_passwords = new(int)
				*pa.creds_passwords = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCred queries the "cred" edge of the Passwords entity.
func (pa *Passwords) QueryCred() *CredsQuery {
	return (&PasswordsClient{config: pa.config}).QueryCred(pa)
}

// Update returns a builder for updating this Passwords.
// Note that you need to call Passwords.Unwrap() before calling this method if this Passwords
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Passwords) Update() *PasswordsUpdateOne {
	return (&PasswordsClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Passwords entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Passwords) Unwrap() *Passwords {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Passwords is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Passwords) String() string {
	var builder strings.Builder
	builder.WriteString("Passwords(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(pa.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(pa.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", password=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// PasswordsSlice is a parsable slice of Passwords.
type PasswordsSlice []*Passwords

func (pa PasswordsSlice) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
